name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0
          profile: minimal
          components: clippy, rustfmt

      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check
        shell: bash

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        shell: bash

      - name: Run unit tests
        run: cargo test -- --test-threads=1
        shell: bash

      - name: Build release binary for integration tests
        if: matrix.os != 'windows-latest'
        run: cargo build --release
        shell: bash

      - name: Run integration tests
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          for script in tests/integration/*.sh; do
            echo "Running ${script}"
            "$script"
          done
        shell: bash

  coverage:
    name: Coverage (tarpaulin)
    runs-on: ubuntu-24.04
    needs: test
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0
          profile: minimal

      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
        shell: bash

      - name: Generate coverage report
        run: cargo tarpaulin --out Html --out Json --out Cobertura --out Lcov -- --test-threads=1
        shell: bash

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tarpaulin-report
          path: target/tarpaulin/
          if-no-files-found: error
