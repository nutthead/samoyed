# ============================================================================
# Enhanced CI Pipeline with Modern Optimizations
# ============================================================================
# High-performance CI workflow featuring:
# - Intelligent caching strategies
# - Parallel job execution
# - Fail-fast for critical checks
# - Dependency caching with cargo-binstall
# - Sccache for distributed compilation caching
# - Merge queue support

name: CI Enhanced

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [master]
  merge_group:
    types: [checks_requested]
  workflow_dispatch:
  schedule:
    # Weekly security audit
    - cron: '0 0 * * MON'

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write

jobs:
  # ============================================================================
  # Quick Checks - Fail fast on basic issues
  # ============================================================================
  quick-check:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0
          components: rustfmt, clippy

      # Cache Rust dependencies
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@bc2d2e71bd35c5549942babaa51a89c586b981d1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: quick-check

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy (fail-fast)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # ============================================================================
  # Dependency Audit - Security scanning
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build on advisories
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0

      # Install cargo-binstall for faster tool installation
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@20aa316bab4942180bbbabe93237858e8d77f1ed # v1.15.5

      - name: Install security tools
        run: |
          # Ensure cargo bin directory is in PATH
          export PATH="${CARGO_HOME:-$HOME/.cargo}/bin:$PATH"
          cargo binstall --no-confirm --locked cargo-audit cargo-deny || cargo install cargo-audit cargo-deny

      - name: Security audit
        run: |
          # Ensure cargo bin directory is in PATH
          export PATH="${CARGO_HOME:-$HOME/.cargo}/bin:$PATH"
          cargo audit --json | tee audit.json
          cargo deny check advisories

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-audit
          path: audit.json
          retention-days: 30

  # ============================================================================
  # Test Matrix - Comprehensive testing across platforms
  # ============================================================================
  test:
    name: Test ${{ matrix.name }}
    needs: [quick-check]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary platforms
          - os: ubuntu-latest
            name: Linux
            target: x86_64-unknown-linux-gnu
            test_args: ""

          - os: macos-14
            name: macOS (ARM)
            target: aarch64-apple-darwin
            test_args: ""

          - os: windows-latest
            name: Windows
            target: x86_64-pc-windows-msvc
            test_args: ""

          # Additional test configurations
          - os: ubuntu-latest
            name: Linux (musl)
            target: x86_64-unknown-linux-musl
            test_args: ""

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          components: clippy, rustfmt

      # Platform-specific caching
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@bc2d2e71bd35c5549942babaa51a89c586b981d1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: ${{ matrix.target }}-${{ matrix.name }}
          save-if: ${{ github.ref == 'refs/heads/master' }}

      # Install musl tools if needed
      - name: Install musl tools
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      # Build
      - name: Build
        run: cargo build --locked --target ${{ matrix.target }} ${{ matrix.test_args }}

      # Test with single thread (required by project)
      - name: Run tests
        run: cargo test --locked --target ${{ matrix.target }} ${{ matrix.test_args }} -- --test-threads=1

      # Run integration tests
      - name: Integration tests
        run: |
          cargo build --locked --release --target ${{ matrix.target }}
          for script in tests/integration/*.sh; do
            echo "Running ${script}"
            bash "$script"
          done
        shell: sh

  # ============================================================================
  # Coverage Analysis with Tarpaulin
  # ============================================================================
  coverage:
    name: Code Coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8 # v1.15.1
        with:
          toolchain: 1.90.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@bc2d2e71bd35c5549942babaa51a89c586b981d1 # v2.8.1
        with:
          cache-on-failure: false
          save-if: false

      # Use cargo-binstall for faster installation
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@20aa316bab4942180bbbabe93237858e8d77f1ed # v1.15.5

      - name: Install tarpaulin
        run: cargo binstall --no-confirm --locked cargo-tarpaulin

      - name: Generate coverage
        run: |
          # Ensure cargo bin directory is in PATH
          export PATH="${CARGO_HOME:-$HOME/.cargo}/bin:$PATH"
          # Using settings from .tarpaulin.toml
          cargo tarpaulin --timeout 120 --avoid-cfg-tarpaulin

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@af09b5e394c93991b95a5e7646aeb90c1917f78f # v5.5.1
        with:
          files: target/tarpaulin/cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Comment on PR with coverage
      - name: Install coverage parser
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        run: npm install fast-xml-parser@5.2.5 dedent@1.7.0 --no-save --no-package-lock

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            const fs = require('fs');
            const { XMLParser } = require('fast-xml-parser');
            const dedent = require('dedent');

            const parser = new XMLParser({
              ignoreAttributes: false,
              attributeNamePrefix: ''
            });

            const rawXml = fs.readFileSync('target/tarpaulin/cobertura.xml', 'utf8');
            const parsed = parser.parse(rawXml);
            const coverage = parsed.coverage;

            const linesCovered = Number(coverage['lines-covered'] ?? 0);
            const linesValid = Number(coverage['lines-valid'] ?? 0);
            const lineRate = Number(coverage['line-rate'] ?? 0);
            const lineCoveragePercent = (lineRate * 100).toFixed(2);

            const branchesCovered = Number(coverage['branches-covered'] ?? 0);
            const branchesValid = Number(coverage['branches-valid'] ?? 0);
            const branchRate = Number(coverage['branch-rate'] ?? 0);
            const branchCoveragePercent = branchesValid > 0
              ? `${(branchRate * 100).toFixed(2)}%`
              : 'N/A';

            const complexity = coverage.complexity ?? 'N/A';
            const timestampSeconds = Number(coverage.timestamp);
            const timestamp = Number.isFinite(timestampSeconds)
              ? new Date(timestampSeconds * 1000).toISOString()
              : 'N/A';

            const packages = coverage.packages?.package ?? [];
            const packageList = Array.isArray(packages) ? packages : [packages];
            const classList = packageList.flatMap(pkg => {
              const classes = pkg?.classes?.class ?? [];
              return Array.isArray(classes) ? classes : [classes];
            }).filter(Boolean);

            const fileSummaries = classList.map(cls => {
              const filename = cls?.filename;
              const fileLineRate = Number(cls?.['line-rate'] ?? 0);
              return filename ? {
                filename,
                coverage: Number.isFinite(fileLineRate) ? (fileLineRate * 100).toFixed(1) : 'N/A'
              } : null;
            }).filter(Boolean);

            const filesReported = fileSummaries.length;
            const detailedReport = fileSummaries.length > 0
              ? fileSummaries
                  .sort((a, b) => a.filename.localeCompare(b.filename))
                  .map(({ filename, coverage }) => `${filename}: ${coverage}%`)
                  .join('\n')
              : 'No per-file coverage data available.';

            const coverageTable = `| Metric | Covered | Total | Rate |\n` +
              `|--------|--------:|------:|------:|\n` +
              `| Lines | ${linesCovered} | ${linesValid} | ${lineCoveragePercent}% |\n` +
              `| Branches | ${branchesCovered} | ${branchesValid} | ${branchCoveragePercent} |`;

            const metadataTable = `| Additional Metric | Value |\n` +
              `|-------------------|-------|\n` +
              `| Complexity | ${complexity} |\n` +
              `| Files Reported | ${filesReported} |\n` +
              `| Report Timestamp | ${timestamp} |`;

            const body = dedent`
              ## 📊 Coverage Report

              ${coverageTable}

              ${metadataTable}

              <details>
              <summary>View detailed report</summary>

              \`\`\`
              ${detailedReport}
              \`\`\`

              </details>

              ---
              *Generated by cargo-tarpaulin*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # ============================================================================
  # Final Status Check
  # ============================================================================
  ci-success:
    name: CI Success
    if: always()
    needs: [quick-check, security, test, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.quick-check.result }}" != "success" ]] ||
             [[ "${{ needs.test.result }}" != "success" ]] ||
             [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "❌ CI failed"
            exit 1
          fi
          echo "✅ All CI checks passed"

      # Add status check for merge queue
      - name: Set merge queue status
        if: github.event_name == 'merge_group'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'CI Status',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'CI Passed',
                summary: 'All CI checks completed successfully'
              }
            });
