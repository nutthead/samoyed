# ============================================================================
# Continuous Integration Workflow
# ============================================================================
# Ensures code quality and correctness across all supported platforms.
# Runs on every push to master, pull request, and can be manually triggered.
# Tests matrix covers Linux, macOS, and Windows to catch platform-specific
# issues before release.

name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

# Write permissions needed for uploading coverage artifacts, PR write access
# required for posting coverage comments on pull requests.
permissions:
  contents: write
  pull-requests: write

jobs:
  # ============================================================================
  # Cross-Platform Testing
  # ============================================================================
  # Validates formatting, linting, and tests across all target platforms.
  # fail-fast disabled to see all platform results even if one fails, helping
  # identify platform-specific issues versus general bugs.
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Pinned version ensures consistent behavior across CI and release builds.
      # Components needed for formatting and linting checks.
      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0
          components: clippy, rustfmt

      # Manual cache configuration instead of Swatinem/rust-cache for finer
      # control over cache keys and paths. OS-specific key prevents cache
      # pollution between platforms.
      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}

      # Formatting check enforces consistent code style across contributions.
      # POSIX shell for maximum portability across all platforms.
      - name: Check formatting
        run: cargo fmt --all -- --check
        shell: sh

      # Clippy with -D warnings ensures no linting issues slip through.
      # all-targets includes tests, benches, and examples in analysis.
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        shell: sh

      # Serial test execution required to prevent race conditions in file
      # operations, particularly for hook installation tests.
      - name: Run unit tests
        run: cargo test -- --test-threads=1
        shell: sh

      # Release build ensures tests run against optimized binary matching
      # production behavior. Now enabled for all platforms including Windows.
      - name: Build release binary for integration tests
        run: cargo build --release
        shell: sh

      # POSIX-compliant shell scripts should work across all platforms with
      # Git Bash on Windows. set -eu ensures script failures are properly
      # detected (pipefail is bash-specific, not POSIX).
      - name: Run integration tests
        run: |
          set -eu
          for script in tests/integration/*.sh; do
            echo "Running ${script}"
            sh "$script"
          done
        shell: sh

  # ============================================================================
  # Code Coverage Analysis
  # ============================================================================
  # Generates coverage metrics to track test completeness. Runs after tests
  # to avoid blocking on coverage tool issues. Ubuntu-only as tarpaulin
  # requires Linux-specific instrumentation.
  coverage:
    name: Coverage (tarpaulin)
    runs-on: ubuntu-24.04
    needs: test
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0

      # Manual cache configuration instead of Swatinem/rust-cache for finer
      # control over cache keys and paths. OS-specific key prevents cache
      # pollution between platforms.
      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}

      # Direct installation instead of caching due to tarpaulin's frequent
      # updates and platform-specific compilation requirements.
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
        shell: sh

      # Multiple output formats for different consumers: HTML for human review,
      # XML for PR comments, JSON for custom processing, LCOV for IDE integration.
      # Serial test execution maintains consistency with test job.
      - name: Generate coverage report
        run: cargo tarpaulin --out Html --out Json --out Xml --out Lcov -- --test-threads=1
        shell: sh

      # Artifacts retained for manual inspection and debugging. 7-day retention
      # balances storage costs with debugging needs.
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tarpaulin-report
          path: target/tarpaulin/
          retention-days: 7
          if-no-files-found: error

      # xml2js required for parsing Cobertura XML in JavaScript environment.
      # Node.js available by default on GitHub runners.
      - name: Install xml2js
        run: npm install xml2js
        shell: sh

      # Automated coverage reporting provides immediate feedback on PR impact.
      # Only runs for PRs to avoid noise on direct pushes.
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { parseString } = require('xml2js');
            const path = 'target/tarpaulin/cobertura.xml';
            
            if (fs.existsSync(path)) {
              const xmlData = fs.readFileSync(path, 'utf8');
              
              return new Promise((resolve, reject) => {
                parseString(xmlData, (err, result) => {
                  if (err) {
                    console.error('Error parsing XML:', err);
                    resolve();
                    return;
                  }
                  
                  try {
                    const coverage = result.coverage.$;
                    const lineRate = parseFloat(coverage['line-rate']);
                    const linesCovered = parseInt(coverage['lines-covered']);
                    const linesValid = parseInt(coverage['lines-valid']);
                    
                    const coveragePercent = Math.round(lineRate * 100);
                    
                    const comment = dedent(`
                    ## ðŸ“Š Code Coverage Report

                    **Coverage:** ${coveragePercent}% (${linesCovered}/${linesValid} lines)

                    ðŸ“ˆ [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

                    ---
                    *Generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)*
                    `);

                    // Dedent preserves readability in source while producing clean output.
                    // Calculates minimum indentation to strip from all lines.
                    function dedent(str) {
                      const lines = str.split('\n');
                      const nonEmptyLines = lines.filter(line => line.trim() !== '');
                      if (nonEmptyLines.length === 0) return str;
                      
                      const minIndent = Math.min(...nonEmptyLines.map(line => {
                        const match = line.match(/^(\s*)/);
                        return match ? match[1].length : 0;
                      }));
                      
                      return lines.map(line => line.slice(minIndent)).join('\n').trim();
                    }
                    
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: comment
                    }).then(resolve).catch(reject);
                  } catch (parseError) {
                    console.error('Error parsing coverage data:', parseError);
                    resolve();
                  }
                });
              });
            }

  