name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0
          components: clippy, rustfmt

      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check
        shell: bash

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        shell: bash

      - name: Run unit tests
        run: cargo test -- --test-threads=1
        shell: bash

      - name: Build release binary for integration tests
        if: matrix.os != 'windows-latest'
        run: cargo build --release
        shell: bash

      - name: Run integration tests
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          for script in tests/integration/*.sh; do
            echo "Running ${script}"
            "$script"
          done
        shell: bash

  coverage:
    name: Coverage (tarpaulin)
    runs-on: ubuntu-24.04
    needs: test
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust 1.90.0
        uses: actions-rust-lang/setup-rust-toolchain@v1.15.0
        with:
          toolchain: 1.90.0

      - name: Cache cargo directories
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
        shell: bash

      - name: Generate coverage report
        run: cargo tarpaulin --out Html --out Json --out Xml --out Lcov -- --test-threads=1
        shell: bash

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tarpaulin-report
          path: target/tarpaulin/
          retention-days: 7
          if-no-files-found: error

      - name: Install xml2js
        run: npm install xml2js
        shell: bash

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { parseString } = require('xml2js');
            const path = 'target/tarpaulin/cobertura.xml';
            
            if (fs.existsSync(path)) {
              const xmlData = fs.readFileSync(path, 'utf8');
              
              return new Promise((resolve, reject) => {
                parseString(xmlData, (err, result) => {
                  if (err) {
                    console.error('Error parsing XML:', err);
                    resolve();
                    return;
                  }
                  
                  try {
                    const coverage = result.coverage.$;
                    const lineRate = parseFloat(coverage['line-rate']);
                    const linesCovered = parseInt(coverage['lines-covered']);
                    const linesValid = parseInt(coverage['lines-valid']);
                    
                    const coveragePercent = Math.round(lineRate * 100);
                    
                    const comment = `
                    ## ðŸ“Š Code Coverage Report
                      
                    **Coverage:** ${coveragePercent}% (${linesCovered}/${linesValid} lines)
                    
                    ðŸ“ˆ [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                    
                    ---
                    *Generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)*
                    `;
                    
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: comment
                    }).then(resolve).catch(reject);
                  } catch (parseError) {
                    console.error('Error parsing coverage data:', parseError);
                    resolve();
                  }
                });
              });
            }

  