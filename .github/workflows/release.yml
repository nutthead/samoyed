# ============================================================================
# Samoyed Release Pipeline v3.0
# ============================================================================
# Production release workflow triggered by:
# - Tag pushes (after release PR merge via release-plz)
# - Manual workflow dispatch for emergency releases
#
# Features:
# - Cross-platform binary compilation with cargo-dist
# - SLSA Level 3 attestation with sigstore/cosign
# - Security scanning and SBOM generation
# - Automated changelog integration
# - Optimized build caching

name: Release

on:
  # Triggered by tag pushes (created by release-plz after PR merge)
  push:
    tags:
      - "v*.*.*"

  # Manual trigger for emergency releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      skip_publish:
        description: 'Skip publishing to crates.io'
        required: false
        type: boolean
        default: false

# Minimal global permissions - elevated per job as needed
permissions:
  contents: read
  actions: read

env:
  RUST_VERSION: stable
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUST_BACKTRACE: short
  # Sigstore/cosign configuration
  COSIGN_EXPERIMENTAL: 1
  FULCIO_URL: https://fulcio.sigstore.dev
  REKOR_URL: https://rekor.sigstore.dev

jobs:
  # ============================================================================
  # Extract Version Information
  # ============================================================================
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/v}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            # Use manual input
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract from Cargo.toml as last resort
            VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          fi

          # Validate version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Releasing version: ${VERSION}"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Verify version matches Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          if [[ "${{ steps.version.outputs.version }}" != "$CARGO_VERSION" ]]; then
            echo "Version mismatch: tag/input=${{ steps.version.outputs.version }} vs Cargo.toml=$CARGO_VERSION"
            exit 1
          fi

  # ============================================================================
  # Security Scanning and SBOM Generation
  # ============================================================================
  security-scan:
    name: Security Audit & SBOM
    runs-on: ubuntu-latest
    needs: [prepare-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: security

      - name: Setup tool cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-audit-cyclonedx-deny
          restore-keys: |
            cargo-tools-${{ runner.os }}-

      - name: Install security tools
        run: |
          # Only install if not cached
          command -v cargo-audit || cargo install cargo-audit --locked
          command -v cargo-cyclonedx || cargo install cargo-cyclonedx --locked
          command -v cargo-deny || cargo install cargo-deny --locked

      - name: Run security audit
        run: |
          cargo audit --json > audit-report.json
          cargo deny check --show-stats || true  # Don't fail on advisories

      - name: Generate SBOM
        run: |
          cargo cyclonedx --format json --spec-version 1.5 > sbom.json
          cargo cyclonedx --format xml --spec-version 1.5 > sbom.xml

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-report.json
            sbom.json
            sbom.xml
          retention-days: 90

  # ============================================================================
  # Cross-Platform Build Matrix
  # ============================================================================
  build-binaries:
    name: Build ${{ matrix.target }}
    needs: [prepare-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: false

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true

          # macOS Apple Silicon
          - os: macos-14
            target: aarch64-apple-darwin
            use_cross: false

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false

          # Additional architectures
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true

          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            use_cross: true

    runs-on: ${{ matrix.os }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: ${{ matrix.target }}
          workspaces: ". -> target"

      - name: Install cross
        if: matrix.use_cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build release binary
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --locked --release --target ${{ matrix.target }}
          else
            cargo build --locked --release --target ${{ matrix.target }}
          fi
        shell: bash
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_STRIP: symbols
          CARGO_PROFILE_RELEASE_PANIC: abort

      - name: Package artifacts
        id: package
        shell: bash
        run: |
          BINARY_NAME="samoyed"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          VERSION="${{ needs.prepare-release.outputs.version }}"
          ARCHIVE_NAME="samoyed-${VERSION}-${{ matrix.target }}"

          mkdir -p dist
          cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "dist/${BINARY_NAME}"
          cp README.md LICENSE dist/

          # Create archive
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "dist/${ARCHIVE_NAME}.zip" ./dist/*
            echo "archive=${ARCHIVE_NAME}.zip" >> "$GITHUB_OUTPUT"
          else
            tar -czf "dist/${ARCHIVE_NAME}.tar.gz" -C dist .
            echo "archive=${ARCHIVE_NAME}.tar.gz" >> "$GITHUB_OUTPUT"
          fi

          # Generate checksums
          cd dist
          if [[ "${{ matrix.os }}" == "macos-"* ]]; then
            shasum -a 256 "${ARCHIVE_NAME}"* > "${ARCHIVE_NAME}.sha256"
          else
            sha256sum "${ARCHIVE_NAME}"* > "${ARCHIVE_NAME}.sha256"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: dist/*
          retention-days: 7

  # ============================================================================
  # SLSA Provenance and Attestation
  # ============================================================================
  attestation:
    name: Generate Attestations
    needs: [build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binary-*

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'artifacts/**/*.tar.gz'
          subject-name: 'samoyed'
          push-to-registry: true

      - name: Generate Windows provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'artifacts/**/*.zip'
          subject-name: 'samoyed'
          push-to-registry: true

      - name: Sign artifacts with cosign
        run: |
          for file in artifacts/**/*.{tar.gz,zip}; do
            if [[ -f "$file" ]]; then
              echo "Signing $file"
              cosign sign-blob \
                --yes \
                --oidc-issuer="${FULCIO_URL}" \
                --output-signature="${file}.sig" \
                --output-certificate="${file}.crt" \
                "$file"
            fi
          done

      - name: Upload attestation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: attestations
          path: |
            artifacts/**/*.sig
            artifacts/**/*.crt
          retention-days: 90

  # ============================================================================
  # Generate Release Notes
  # ============================================================================
  generate-changelog:
    name: Generate Changelog
    needs: [prepare-release]
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for this release
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Find the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]' | sed -n '2p')

          if [[ -n "$PREV_TAG" ]]; then
            echo "Generating changelog from $PREV_TAG to v$VERSION"
            CHANGELOG=$(git-cliff "$PREV_TAG"..HEAD --strip all)
          else
            echo "Generating changelog for all commits"
            CHANGELOG=$(git-cliff --strip all)
          fi

          # Save to file for artifact
          echo "$CHANGELOG" > changelog.md

          # Save to output (escape for GitHub Actions)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md
          retention-days: 7

  # ============================================================================
  # Publish GitHub Release
  # ============================================================================
  publish-release:
    name: Publish GitHub Release
    needs: [prepare-release, build-binaries, attestation, security-scan, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate release notes
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          cat > release-notes.md << 'EOF'
          ## 🚀 Samoyed v${{ needs.prepare-release.outputs.version }}

          ### 📊 Release Metrics
          - **SLSA Level**: 3 ✅
          - **Signed**: Yes (Sigstore/Cosign) ✅
          - **Attestation**: Available ✅
          - **SBOM**: Included (CycloneDX format) ✅

          ### 📝 What's Changed
          ${{ needs.generate-changelog.outputs.changelog }}

          ### 🔒 Security
          All release artifacts are signed using Sigstore's keyless signing and include SLSA provenance attestations.

          To verify signatures:
          ```bash
          cosign verify-blob \
            --certificate samoyed-${VERSION}-<platform>.tar.gz.crt \
            --signature samoyed-${VERSION}-<platform>.tar.gz.sig \
            --certificate-identity-regexp "https://github.com/nutthead/samoyed" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            samoyed-${VERSION}-<platform>.tar.gz
          ```

          ### 📦 Installation

          #### Cargo
          ```bash
          cargo install samoyed
          ```

          #### macOS (Apple Silicon)
          ```bash
          curl -L https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-aarch64-apple-darwin.tar.gz | tar xz
          sudo mv samoyed /usr/local/bin/
          ```

          #### Linux
          ```bash
          curl -L https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv samoyed /usr/local/bin/
          ```

          ### 🏗️ Supported Platforms
          - Linux (x86_64, aarch64, armv7) - glibc and musl
          - macOS (Apple Silicon - M1/M2/M3/M4 and later)
          - Windows (x86_64, ARM64)
          - RISC-V (experimental)

          ---
          *Released with ❤️ using GitHub Actions, release-plz, and Sigstore*
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Samoyed v${{ needs.prepare-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
          files: |
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.zip
            release-artifacts/**/*.sha256
            release-artifacts/**/*.sig
            release-artifacts/**/*.crt
            release-artifacts/security-reports/*
          generate_release_notes: false

  # ============================================================================
  # Publish to crates.io
  # ============================================================================
  publish-crate:
    name: Publish to crates.io
    needs: [publish-release]
    if: github.event.inputs.skip_publish != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: crates-io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: false

      - name: Verify package
        run: |
          # Full verification before publishing
          cargo package --locked --allow-dirty
          cargo package --locked --list

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # ============================================================================
  # Post-Release Verification
  # ============================================================================
  verify-release:
    name: Verify Release
    needs: [prepare-release, publish-release]
    runs-on: ubuntu-latest
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Verify signatures
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Download and verify a sample artifact
          curl -L -o test-artifact.tar.gz \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz"

          curl -L -o test-artifact.tar.gz.sig \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz.sig"

          curl -L -o test-artifact.tar.gz.crt \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz.crt"

          # Verify the signature
          cosign verify-blob \
            --certificate test-artifact.tar.gz.crt \
            --signature test-artifact.tar.gz.sig \
            --certificate-identity-regexp "https://github.com/nutthead/samoyed" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            test-artifact.tar.gz

      - name: Verify crate publication
        if: github.event.inputs.skip_publish != 'true'
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Wait for crates.io to update
          sleep 30

          # Check if the version is available
          curl -s "https://crates.io/api/v1/crates/samoyed/${VERSION}" | jq -r '.version.num'