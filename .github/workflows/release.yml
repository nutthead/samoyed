# ============================================================================
# Samoyed Modern Release Pipeline v2.0
# ============================================================================
# Next-generation release workflow featuring:
# - AI-assisted changelog generation with release-plz
# - SLSA Level 3 attestation with sigstore/cosign
# - Comprehensive cross-compilation with cargo-dist
# - Security scanning with cargo-audit and SBOM generation
# - Optimized caching and parallel builds
# - Native ARM runners for better performance
#
# This workflow creates a complete release cycle:
# 1. Automated PR creation with changelog (release-plz)
# 2. Cross-platform binary compilation (cargo-dist)
# 3. Cryptographic signing and attestation (sigstore)
# 4. GitHub release with provenance metadata

name: Release

on:
  # Automated release PR creation on push to master
  push:
    branches: [master]

  # Manual trigger for immediate releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Override version (optional, uses release-plz default if empty)'
        required: false
        type: string
      skip_publish:
        description: 'Skip publishing to crates.io'
        required: false
        type: boolean
        default: false

# Security-conscious permission model following principle of least privilege
permissions:
  contents: write        # Creating releases and tags
  pull-requests: write   # Creating/updating release PRs
  id-token: write       # OIDC token for sigstore signing
  attestations: write   # Artifact attestations
  actions: read         # Reading workflow state
  checks: read          # Verifying CI status

env:
  RUST_VERSION: stable  # Use latest stable for cutting-edge features
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse  # Faster registry access
  RUST_BACKTRACE: short
  # Sigstore/cosign configuration
  COSIGN_EXPERIMENTAL: 1  # Enable keyless signing
  FULCIO_URL: https://fulcio.sigstore.dev
  REKOR_URL: https://rekor.sigstore.dev

jobs:
  # ============================================================================
  # Release Preparation with release-plz
  # ============================================================================
  # Manages version bumps, changelog generation, and creates release PRs
  # automatically based on conventional commits
  prepare-release:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
      pr_created: ${{ steps.release.outputs.pr }}
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: cargo

      # Enhanced caching with fine-grained control
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true
          prefix-key: "v2-rust"
          key: release-plz

      # release-plz handles everything: version bumps, changelogs, PR creation
      - name: Run release-plz
        id: release
        uses: MarcoIeni/release-plz-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: release-pr
          config_file: .release-plz.toml

      - name: Extract version from PR
        id: extract
        if: steps.release.outputs.pr
        run: |
          # Parse version from release-plz output
          VERSION=$(echo "${{ steps.release.outputs.pr }}" | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?')
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

  # ============================================================================
  # Security Scanning and SBOM Generation
  # ============================================================================
  security-scan:
    name: Security Audit & SBOM
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: needs.prepare-release.outputs.pr_created || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: security

      # Security audit with cargo-audit
      - name: Install security tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-cyclonedx --locked
          cargo install cargo-deny --locked

      - name: Run security audit
        run: |
          cargo audit --json > audit-report.json
          cargo deny check --show-stats

      # Generate Software Bill of Materials (SBOM)
      - name: Generate SBOM
        run: |
          cargo cyclonedx --format json --spec-version 1.5 > sbom.json
          cargo cyclonedx --format xml --spec-version 1.5 > sbom.xml

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-report.json
            sbom.json
            sbom.xml
          retention-days: 90

  # ============================================================================
  # Cross-Platform Build Matrix with cargo-dist
  # ============================================================================
  build-binaries:
    name: Build ${{ matrix.target }}
    needs: [prepare-release, security-scan]
    if: needs.prepare-release.outputs.pr_created || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Native builds (faster than cross-compilation)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: false

          # ARM64 Linux using native GitHub runners (new in 2024)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
            runner_arch: ARM64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true

          # macOS Universal Binary support
          - os: macos-14  # M1 runner
            target: aarch64-apple-darwin
            use_cross: false

          - os: macos-13  # Intel runner
            target: x86_64-apple-darwin
            use_cross: false

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false

          # Additional architectures
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true

          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            use_cross: true

    runs-on: ${{ matrix.runner_arch && format('ubuntu-latest-{0}', matrix.runner_arch) || matrix.os }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Optimized caching per target
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: ${{ matrix.target }}
          workspaces: ". -> target"
          cache-directories: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/

      # Install cross for cross-compilation
      - name: Install cross
        if: matrix.use_cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      # Build with maximum optimization
      - name: Build release binary
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
        env:
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_STRIP: symbols
          CARGO_PROFILE_RELEASE_PANIC: abort

      # Package binaries with metadata
      - name: Package artifacts
        id: package
        shell: bash
        run: |
          BINARY_NAME="samoyed"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          VERSION="${{ needs.prepare-release.outputs.version || github.event.inputs.version || '0.0.0' }}"
          ARCHIVE_NAME="samoyed-${VERSION}-${{ matrix.target }}"

          mkdir -p dist
          cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "dist/${BINARY_NAME}"
          cp README.md LICENSE dist/

          # Create archive
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "dist/${ARCHIVE_NAME}.zip" ./dist/*
            echo "archive=${ARCHIVE_NAME}.zip" >> "$GITHUB_OUTPUT"
          else
            tar -czf "dist/${ARCHIVE_NAME}.tar.gz" -C dist .
            echo "archive=${ARCHIVE_NAME}.tar.gz" >> "$GITHUB_OUTPUT"
          fi

          # Generate checksums
          cd dist
          if [[ "${{ matrix.os }}" == "macos-"* ]]; then
            shasum -a 256 "${ARCHIVE_NAME}"* > "${ARCHIVE_NAME}.sha256"
          else
            sha256sum "${ARCHIVE_NAME}"* > "${ARCHIVE_NAME}.sha256"
          fi

      # Upload artifacts for attestation
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: dist/*
          retention-days: 7

  # ============================================================================
  # SLSA Provenance and Attestation
  # ============================================================================
  attestation:
    name: Generate Attestations
    needs: [build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binary-*

      # Install cosign for signing
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'

      # Generate SLSA provenance attestation
      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'artifacts/**/*.tar.gz'
          subject-name: 'samoyed'
          push-to-registry: true

      - name: Generate Windows provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'artifacts/**/*.zip'
          subject-name: 'samoyed'
          push-to-registry: true

      # Sign artifacts with cosign
      - name: Sign artifacts with cosign
        run: |
          for file in artifacts/**/*.{tar.gz,zip}; do
            if [[ -f "$file" ]]; then
              echo "Signing $file"
              cosign sign-blob \
                --yes \
                --oidc-issuer="${FULCIO_URL}" \
                --output-signature="${file}.sig" \
                --output-certificate="${file}.crt" \
                "$file"
            fi
          done

      - name: Upload attestation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: attestations
          path: |
            artifacts/**/*.sig
            artifacts/**/*.crt
          retention-days: 90

  # ============================================================================
  # macOS Universal Binary Creation
  # ============================================================================
  universal-binary:
    name: Create macOS Universal Binary
    needs: [build-binaries]
    runs-on: macos-latest
    if: needs.prepare-release.outputs.pr_created || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*-apple-darwin
          path: artifacts

      - name: Create universal binary
        run: |
          # Extract individual architectures
          tar -xzf artifacts/binary-x86_64-apple-darwin/*.tar.gz -C /tmp
          mv /tmp/samoyed /tmp/samoyed-x86_64

          tar -xzf artifacts/binary-aarch64-apple-darwin/*.tar.gz -C /tmp
          mv /tmp/samoyed /tmp/samoyed-aarch64

          # Create universal binary
          lipo -create -output samoyed-universal \
            /tmp/samoyed-x86_64 \
            /tmp/samoyed-aarch64

          # Verify universal binary
          lipo -info samoyed-universal

          # Package universal binary
          VERSION="${{ needs.prepare-release.outputs.version || github.event.inputs.version || '0.0.0' }}"
          ARCHIVE_NAME="samoyed-${VERSION}-universal-apple-darwin"

          mkdir -p dist
          mv samoyed-universal "dist/samoyed"
          chmod +x "dist/samoyed"

          tar -czf "dist/${ARCHIVE_NAME}.tar.gz" -C dist samoyed
          shasum -a 256 "dist/${ARCHIVE_NAME}.tar.gz" > "dist/${ARCHIVE_NAME}.sha256"

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-universal-apple-darwin
          path: dist/*
          retention-days: 7

  # ============================================================================
  # Publish Release
  # ============================================================================
  publish-release:
    name: Publish GitHub Release
    needs: [prepare-release, build-binaries, attestation, universal-binary]
    if: needs.prepare-release.outputs.pr_created || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: release  # Protected environment for production releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      # Generate comprehensive release notes
      - name: Generate release notes
        run: |
          VERSION="${{ needs.prepare-release.outputs.version || github.event.inputs.version }}"

          cat > release-notes.md << 'EOF'
          ## 🚀 Samoyed v${VERSION}

          ### 📊 Release Metrics
          - **SLSA Level**: 3 ✅
          - **Signed**: Yes (Sigstore/Cosign) ✅
          - **Attestation**: Available ✅
          - **SBOM**: Included (CycloneDX format) ✅

          ### 🔒 Security
          All release artifacts are signed using Sigstore's keyless signing and include SLSA provenance attestations.

          To verify signatures:
          ```bash
          cosign verify-blob \
            --certificate samoyed-${VERSION}-<platform>.tar.gz.crt \
            --signature samoyed-${VERSION}-<platform>.tar.gz.sig \
            samoyed-${VERSION}-<platform>.tar.gz
          ```

          ### 📦 Installation

          #### Cargo
          ```bash
          cargo install samoyed
          ```

          #### macOS Universal Binary
          ```bash
          curl -L https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-universal-apple-darwin.tar.gz | tar xz
          sudo mv samoyed /usr/local/bin/
          ```

          #### Linux
          ```bash
          curl -L https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xz
          sudo mv samoyed /usr/local/bin/
          ```

          ### 📝 Changelog
          <!-- Changelog will be inserted here by release-plz -->

          ### 🏗️ Supported Platforms
          - Linux (x86_64, aarch64, armv7) - glibc and musl
          - macOS (Intel, Apple Silicon, Universal)
          - Windows (x86_64, ARM64)
          - RISC-V (experimental)

          ### ✨ Contributors
          <!-- Contributors list will be added here -->

          ---
          *Released with ❤️ using GitHub Actions, release-plz, and Sigstore*
          EOF

      # Create GitHub release with all artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version || github.event.inputs.version }}
          name: Samoyed v${{ needs.prepare-release.outputs.version || github.event.inputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}
          files: |
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.zip
            release-artifacts/**/*.sha256
            release-artifacts/**/*.sig
            release-artifacts/**/*.crt
            release-artifacts/security-reports/*
          generate_release_notes: true  # Append GitHub's auto-generated notes

  # ============================================================================
  # Publish to crates.io
  # ============================================================================
  publish-crate:
    name: Publish to crates.io
    needs: [publish-release]
    if: |
      !github.event.inputs.skip_publish &&
      (needs.prepare-release.outputs.pr_created || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: crates-io  # Protected environment for crates.io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: false

      # Verify before publishing
      - name: Verify package
        run: |
          cargo package --no-verify
          cargo package --list

      - name: Publish to crates.io
        run: cargo publish --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # ============================================================================
  # Post-Release Verification
  # ============================================================================
  verify-release:
    name: Verify Release
    needs: [publish-release, publish-crate]
    runs-on: ubuntu-latest
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Verify signatures
        run: |
          VERSION="${{ needs.prepare-release.outputs.version || github.event.inputs.version }}"

          # Download and verify a sample artifact
          curl -L -o test-artifact.tar.gz \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz"

          curl -L -o test-artifact.tar.gz.sig \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz.sig"

          curl -L -o test-artifact.tar.gz.crt \
            "https://github.com/nutthead/samoyed/releases/download/v${VERSION}/samoyed-${VERSION}-x86_64-unknown-linux-gnu.tar.gz.crt"

          # Verify the signature
          cosign verify-blob \
            --certificate test-artifact.tar.gz.crt \
            --signature test-artifact.tar.gz.sig \
            --certificate-identity-regexp "https://github.com/nutthead/samoyed" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            test-artifact.tar.gz

      - name: Verify crate publication
        run: |
          VERSION="${{ needs.prepare-release.outputs.version || github.event.inputs.version }}"
          # Wait a bit for crates.io to update
          sleep 30

          # Check if the version is available
          curl -s "https://crates.io/api/v1/crates/samoyed/${VERSION}" | jq -r '.version.num'