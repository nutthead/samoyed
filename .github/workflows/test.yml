name: 🧪 Test Suite

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

on:
  push:
    branches: [master, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".tarpaulin.toml"
      - ".github/workflows/test.yml"
  pull_request:
    branches: [master, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".tarpaulin.toml"
      - ".github/workflows/test.yml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: nightly
          - os: ubuntu-latest
            rust: beta
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: stable
            shell: powershell
          - os: windows-latest
            rust: stable
            shell: bash

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: 🔧 Configure working directory
        run: |
          pwd
          echo "Working directory: $(pwd)"
        shell: bash

      - name: 🌍 Set up cross-platform environment
        run: |
          echo "=== Cross-Platform Environment Detection ==="
          echo "OS: ${{ runner.os }}"
          echo "Shell: ${{ matrix.shell || 'bash' }}"
          echo "Rust: ${{ matrix.rust }}"

          # Set environment variables for cross-platform testing
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ "${{ matrix.shell || 'bash' }}" == "bash" ]]; then
              echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
              echo "Testing Windows with Git Bash (MSYSTEM=MINGW64)"
            else
              echo "Testing native Windows with PowerShell/cmd"
            fi
          fi

          # Display environment for debugging
          echo "PATH: $PATH"
          echo "HOME: ${HOME:-$USERPROFILE}"
          echo "Current directory: $(pwd)"
        shell: bash

      - name: 🔍 Check code formatting
        run: |
          cargo fmt --all -- --check
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

      - name: 📋 Run Clippy lints
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
        if: matrix.rust == 'stable'

      - name: 🏗️ Build project
        run: |
          cargo build --verbose

      - name: 🏗️ Build release
        run: |
          cargo build --release --verbose
        if: matrix.rust == 'stable'

      - name: 📦 Package release artifacts (Unix)
        if: matrix.rust == 'stable' && runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/release/samoid artifacts/
          cp target/release/samoid-hook artifacts/
          cd artifacts
          tar czf samoid-${{ runner.os }}-${{ runner.arch }}.tar.gz samoid samoid-hook
          echo "📦 Created artifact: samoid-${{ runner.os }}-${{ runner.arch }}.tar.gz"

      - name: 📦 Package release artifacts (Windows)
        if: matrix.rust == 'stable' && runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/release/samoid.exe artifacts/
          cp target/release/samoid-hook.exe artifacts/
          cd artifacts
          7z a -tzip samoid-${{ runner.os }}-${{ runner.arch }}.zip samoid.exe samoid-hook.exe
          echo "📦 Created artifact: samoid-${{ runner.os }}-${{ runner.arch }}.zip"

      - name: 📤 Upload release artifacts
        if: matrix.rust == 'stable'
        uses: actions/upload-artifact@v4
        with:
          name: samoid-${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.shell || 'default' }}
          path: |
            artifacts/samoid-*.tar.gz
            artifacts/samoid-*.zip
          retention-days: 30

      - name: 🧪 Run unit tests
        run: |
          cargo test --lib --verbose

      - name: 🔗 Run installation tests
        run: |
          cargo test --test installation_tests --verbose

      - name: 🛠️ Run error handling tests
        run: |
          cargo test --test error_handling_tests --verbose

      - name: ✅ Run validation tests
        run: |
          cargo test --test validation_tests --verbose

      - name: 🐧 Run Linux-specific tests
        run: |
          cargo test --test linux_tests --verbose
        if: runner.os == 'Linux'

      - name: 🍎 Run macOS-specific tests
        run: |
          cargo test --test macos_tests --verbose
        if: runner.os == 'macOS'

      - name: 🪟 Run Windows-specific tests
        run: |
          cargo test --test windows_tests --verbose
        if: runner.os == 'Windows'

      - name: 🌐  Run cross-platform compatibility tests
        run: |
          echo "Running cross-platform shell execution tests..."
          cargo test --test cross_platform_shell_execution --verbose
          echo "Cross-platform tests completed successfully"
        shell: bash

      - name: 🚀 Run all tests
        run: |
          cargo test --verbose

      - name: 📚 Generate documentation
        run: |
          cargo doc --no-deps --verbose
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

      - name: ⚡ Run benchmarks
        run: |
          cargo bench --verbose
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    # Runs in parallel with test and security jobs for faster CI

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: 🔧 Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: 📊 Generate code coverage
        run: |
          # Run tarpaulin with configuration from .tarpaulin.toml
          cargo tarpaulin --verbose --all-features --workspace --timeout 120

          # The .tarpaulin.toml now generates all formats: Html, Xml, Json, Lcov
          # Files are automatically placed in target/tarpaulin/coverage/

          # Extract coverage percentage from JSON for GitHub environment
          if [ -f target/tarpaulin/coverage/tarpaulin-report.json ]; then
            COVERAGE=$(jq -r '.files | to_entries | map(.value) |
              {covered: map(.covered) | add, coverable: map(.coverable) | add} |
              (.covered / .coverable * 100)' target/tarpaulin/coverage/tarpaulin-report.json 2>/dev/null || echo "0")
            echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
            echo "📊 Code Coverage: ${COVERAGE}%"

            # Enforce 90% coverage threshold (AC11.4)
            # Changong it to %69 until code coverage is increased gradually
            THRESHOLD=69
            if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
              echo "❌ FAIL: Code coverage ${COVERAGE}% is below the required ${THRESHOLD}% threshold"
              echo "COVERAGE_CHECK_PASSED=false" >> $GITHUB_ENV
              exit 1
            else
              echo "✅ PASS: Code coverage ${COVERAGE}% meets the ${THRESHOLD}% threshold requirement"
              echo "COVERAGE_CHECK_PASSED=true" >> $GITHUB_ENV
            fi
          else
            echo "COVERAGE_PERCENTAGE=0" >> $GITHUB_ENV
            echo "COVERAGE_CHECK_PASSED=false" >> $GITHUB_ENV
            echo "⚠️ Coverage report not found"
            exit 1
          fi

      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: target/tarpaulin/coverage/
          retention-days: 30

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: target/tarpaulin/coverage/lcov.info
          directory: target/tarpaulin/coverage/
          flags: unittests
          name: samoid-coverage
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 💬 Comment coverage on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './target/tarpaulin/coverage/tarpaulin-report.json';

            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));

              // Calculate total coverage from all files
              const totals = Object.values(report.files || {}).reduce(
                (acc, file) => ({
                  covered: acc.covered + file.covered,
                  coverable: acc.coverable + file.coverable
                }),
                { covered: 0, coverable: 0 }
              );

              const coveragePercent = totals.coverable > 0
                ? (totals.covered / totals.coverable * 100).toFixed(2)
                : '0.00';

              const threshold = 90;
              const meetsThreshold = parseFloat(coveragePercent) >= threshold;
              const statusEmoji = meetsThreshold ? '✅' : '❌';
              const statusText = meetsThreshold
                ? `Meets the ${threshold}% threshold requirement`
                : `Below the required ${threshold}% threshold`;

              const comment = `## 📊 Code Coverage Report

              **Coverage: ${coveragePercent}%** ${statusEmoji} ${statusText}

              | Metric | Value |
              |--------|-------|
              | Lines Covered | ${totals.covered} |
              | Total Lines | ${totals.coverable} |
              | Coverage % | ${coveragePercent}% |
              | Required Threshold | ${threshold}% |
              | Status | ${meetsThreshold ? 'PASS ✅' : 'FAIL ❌'} |

              📁 **Coverage by File:**
              ${Object.entries(coverage.files || {}).map(([file, data]) =>
                `- \`${file}\`: ${((data.covered / data.coverable) * 100).toFixed(1)}% (${data.covered}/${data.coverable} lines)`
              ).join('\n')}

              ---
              *Coverage report generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)*`;

              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                console.log('✅ Coverage comment posted successfully');
              } catch (error) {
                console.log('⚠️ Could not post coverage comment:', error.message);
                console.log('This is expected for forks and doesn\'t affect the coverage generation');
              }
            } else {
              console.log('ℹ️ No coverage report found, skipping comment');
            }

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    # Runs in parallel with test and coverage jobs for faster CI

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: 🔧 Install cargo-audit
        run: cargo install --force cargo-audit

      - name: 🔍 Run security audit
        run: |
          echo "🔒 Running security audit..."
          cargo audit --format json > audit-report.json || echo "Security issues found"
          cargo audit || AUDIT_EXIT_CODE=$?

          # Parse audit results
          if [ -f audit-report.json ]; then
            VULNERABILITIES=$(jq '.vulnerabilities.found | length' audit-report.json 2>/dev/null || echo "0")
            WARNINGS=$(jq '.warnings | length' audit-report.json 2>/dev/null || echo "0")
          else
            VULNERABILITIES=0
            WARNINGS=0
          fi

          echo "VULNERABILITIES_COUNT=$VULNERABILITIES" >> $GITHUB_ENV
          echo "WARNINGS_COUNT=$WARNINGS" >> $GITHUB_ENV
          echo "🔒 Security Audit Complete: $VULNERABILITIES vulnerabilities, $WARNINGS warnings"

          # Exit with original code if there were issues
          if [ ! -z "$AUDIT_EXIT_CODE" ]; then
            exit $AUDIT_EXIT_CODE
          fi

      - name: 💬 Comment security audit on PR
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './audit-report.json';

            let comment = `## 🔒 Security Audit Report\n\n`;

            if (fs.existsSync(path)) {
              try {
                const audit = JSON.parse(fs.readFileSync(path, 'utf8'));
                const vulnCount = audit.vulnerabilities?.found?.length || 0;
                const warnCount = audit.warnings?.length || 0;

                if (vulnCount === 0 && warnCount === 0) {
                  comment += `✅ **No security issues found!**\n\n`;
                  comment += `🎉 All dependencies passed security audit.\n`;
                } else {
                  comment += `⚠️ **Security Issues Found**\n\n`;
                  comment += `| Type | Count |\n`;
                  comment += `|------|-------|\n`;
                  comment += `| 🚨 Vulnerabilities | ${vulnCount} |\n`;
                  comment += `| ⚠️  Warnings | ${warnCount} |\n\n`;

                  if (vulnCount > 0) {
                    comment += `### 🚨 Vulnerabilities:\n`;
                    audit.vulnerabilities.found.forEach(vuln => {
                      comment += `- **${vuln.package.name}** v${vuln.package.version}\n`;
                      comment += `  - ${vuln.advisory.title}\n`;
                      comment += `  - Severity: ${vuln.advisory.severity}\n`;
                      comment += `  - ID: ${vuln.advisory.id}\n\n`;
                    });
                  }

                  if (warnCount > 0) {
                    comment += `### ⚠️ Warnings:\n`;
                    audit.warnings.forEach(warn => {
                      comment += `- ${warn.kind}: ${warn.package?.name || 'Unknown'}\n`;
                    });
                  }
                }
              } catch (e) {
                comment += `❌ **Error parsing audit report**\n\n`;
                comment += `Could not parse security audit results. Check the logs for details.\n`;
              }
            } else {
              comment += `✅ **Security audit completed successfully**\n\n`;
              comment += `No security report file found - likely no issues detected.\n`;
            }

            comment += `\n---\n*Security audit performed by [cargo-audit](https://github.com/RustSec/rustsec)*`;

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('✅ Security audit comment posted successfully');
            } catch (error) {
              console.log('⚠️ Could not post security audit comment:', error.message);
              console.log('This is expected for forks and doesn\'t affect the security audit');
            }

  summary:
    name: ✅ Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    if: always()

    steps:
      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Samoid Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test Results Section
          echo "## 🔍 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "| 🧪 **Unit & Integration Tests** | ✅ **PASSED** | All test suites executed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 **Unit & Integration Tests** | ❌ **FAILED** | Some tests failed - check logs for details |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.coverage.result }}" == "success" ]; then
            echo "| 📊 **Code Coverage** | ✅ **GENERATED** | Coverage report generated and uploaded |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📊 **Code Coverage** | ❌ **FAILED** | Coverage generation failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "| 🔒 **Security Audit** | ✅ **CLEAN** | No security vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 **Security Audit** | ⚠️ **ISSUES** | Security audit found potential issues |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Platform Coverage
          echo "## 🌍 Platform Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Ubuntu Latest** (stable, beta, nightly)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **macOS Latest** (stable, beta)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Windows Latest** (stable, PowerShell, Git Bash)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Cross-platform compatibility tests** (shell execution, environment detection)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parallel Job Execution
          echo "## ⚡ Parallel Execution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Jobs run in parallel for faster CI execution:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Test Suite**: Cross-platform testing and builds" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Code Coverage**: Coverage analysis and reporting" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Security Audit**: Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Quality Metrics
          echo "## 📈 Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "- ✅ **Code Formatting**: All code properly formatted (rustfmt)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Linting**: No Clippy warnings or errors" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Build**: Both debug and release builds successful" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Documentation**: Generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Benchmarks**: Performance benchmarks completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Artifacts and Reports
          echo "## 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.coverage.result }}" == "success" ]; then
            echo "- 📊 **Coverage Reports**: HTML, XML, and JSON formats available" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 **Codecov Integration**: Results uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "- 🔒 **Security Audit**: Dependency vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Workflow Information
          echo "## ℹ️ Workflow Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Next Steps
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.coverage.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
            echo "🎉 **All checks passed!** This code is ready for review and merge." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All tests are passing" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code coverage is being tracked" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ No security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code quality metrics are satisfied" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed.** Please review the failing jobs:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test.result }}" != "success" ]; then
              echo "- ❌ Fix failing tests before proceeding" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.coverage.result }}" != "success" ]; then
              echo "- ❌ Resolve code coverage generation issues" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.security.result }}" != "success" ]; then
              echo "- ⚠️ Address security audit findings" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: 🎯 Check overall success
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.coverage.result }}" != "success" ] || [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Workflow failed - check individual job results"
            exit 1
          else
            echo "✅ All checks passed successfully!"
          fi

  artifacts:
    name: 📦 Collect Build Artifacts
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && needs.test.result == 'success'

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: samoid-*
          path: collected-artifacts/

      - name: 📋 List collected artifacts
        run: |
          echo "📦 Collected Build Artifacts:"
          echo ""
          find collected-artifacts -type f -name "*.tar.gz" -o -name "*.zip" | while read -r file; do
            echo "- $(basename "$file") ($(du -h "$file" | cut -f1))"
          done

      - name: 📤 Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samoid-binaries-all-platforms
          path: collected-artifacts/**/*.{tar.gz,zip}
          retention-days: 30

      - name: 📊 Generate artifact summary
        run: |
          echo "# 📦 Build Artifacts Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Architecture | File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------------|------|------|" >> $GITHUB_STEP_SUMMARY

          find collected-artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) | sort | while read -r file; do
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)

            # Extract platform and arch from filename
            if [[ $filename =~ samoid-(.+)-(.+)\.(tar\.gz|zip) ]]; then
              platform="${BASH_REMATCH[1]}"
              arch="${BASH_REMATCH[2]}"
              echo "| $platform | $arch | \`$filename\` | $size |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All platform binaries successfully built and packaged!" >> $GITHUB_STEP_SUMMARY
