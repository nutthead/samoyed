name: 🧪 Test Suite

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

on:
  push:
    branches: [master, develop]
    paths:
      - "samoid/**"
      - ".github/workflows/test.yml"
  pull_request:
    branches: [master, develop]
    paths:
      - "samoid/**"
      - ".github/workflows/test.yml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
          - os: ubuntu-latest
            rust: 1.85.0 # First Rust 2024 edition
          - os: ubuntu-24.04
            rust: 1.88.0 # Latest stable version
          - os: ubuntu-24.04 # Latest LTS version
            rust: stable
          # Additional Windows configurations for cross-platform testing
          - os: windows-latest
            rust: stable
            shell: powershell # Test native Windows PowerShell
          - os: windows-latest
            rust: stable
            shell: bash # Test Git Bash on Windows

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            samoid/target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('samoid/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: 🔧 Configure working directory
        run: |
          cd samoid
          pwd
        shell: ${{ matrix.shell || 'bash' }}

      - name: 🌍 Set up cross-platform environment
        run: |
          cd samoid
          echo "=== Cross-Platform Environment Detection ==="
          echo "OS: ${{ runner.os }}"
          echo "Shell: ${{ matrix.shell || 'bash' }}"
          echo "Rust: ${{ matrix.rust }}"
          
          # Set environment variables for cross-platform testing
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ "${{ matrix.shell }}" == "bash" ]]; then
              echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
              echo "Testing Windows with Git Bash (MSYSTEM=MINGW64)"
            else
              echo "Testing native Windows with PowerShell/cmd"
            fi
          fi
          
          # Display environment for debugging
          echo "PATH: $PATH"
          echo "HOME: ${HOME:-$USERPROFILE}"
          echo "Current directory: $(pwd)"
        shell: ${{ matrix.shell || 'bash' }}

      - name: 🔍 Check code formatting
        run: |
          cd samoid
          cargo fmt --all -- --check
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

      - name: 📋 Run Clippy lints
        run: |
          cd samoid
          cargo clippy --all-targets --all-features -- -D warnings
        if: matrix.rust == 'stable'

      - name: 🏗️ Build project
        run: |
          cd samoid
          cargo build --verbose

      - name: 🏗️ Build release
        run: |
          cd samoid
          cargo build --release --verbose
        if: matrix.rust == 'stable'

      - name: 🧪 Run unit tests
        run: |
          cd samoid
          cargo test --lib --verbose

      - name: 🔗 Run installation tests
        run: |
          cd samoid
          cargo test --test installation_tests --verbose

      - name: 🛠️ Run error handling tests
        run: |
          cd samoid
          cargo test --test error_handling_tests --verbose

      - name: ✅ Run validation tests
        run: |
          cd samoid
          cargo test --test validation_tests --verbose

      - name: 🐧 Run Linux-specific tests
        run: |
          cd samoid
          cargo test --test linux_tests --verbose
        if: runner.os == 'Linux'

      - name: 🍎 Run macOS-specific tests
        run: |
          cd samoid
          cargo test --test macos_tests --verbose
        if: runner.os == 'macOS'

      - name: 🪟 Run Windows-specific tests
        run: |
          cd samoid
          cargo test --test windows_tests --verbose
        if: runner.os == 'Windows'

      - name: 🌐  Run cross-platform compatibility tests
        run: |
          cd samoid
          echo "Running cross-platform shell execution tests..."
          cargo test --test cross_platform_shell_execution --verbose
          echo "Cross-platform tests completed successfully"
        shell: ${{ matrix.shell || 'bash' }}

      - name: 🚀 Run all tests
        run: |
          cd samoid
          cargo test --verbose

      - name: 📚 Generate documentation
        run: |
          cd samoid
          cargo doc --no-deps --verbose
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

      - name: ⚡ Run benchmarks
        run: |
          cd samoid
          cargo bench --verbose
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            samoid/target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('samoid/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: 🔧 Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: 📊 Generate code coverage
        run: |
          cd samoid
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --engine llvm \
            --timeout 120 \
            --out xml \
            --out html \
            --out json \
            --output-dir target/tarpaulin
          
          # Extract coverage percentage for use in other steps
          if [ -f target/tarpaulin/tarpaulin-report.json ]; then
            COVERAGE=$(jq -r '.coverage // 0' target/tarpaulin/tarpaulin-report.json 2>/dev/null || echo "0")
            echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
            echo "📊 Code Coverage: $COVERAGE%"
          else
            echo "COVERAGE_PERCENTAGE=0" >> $GITHUB_ENV
            echo "📊 Code Coverage: Report not found"
          fi

      - name: 📋 Display coverage summary
        run: |
          cd samoid
          if [ -f target/tarpaulin/cobertura.xml ]; then
            echo "📊 Coverage Report Generated Successfully"
            echo "HTML Report: target/tarpaulin/tarpaulin-report.html"
            echo "XML Report: target/tarpaulin/cobertura.xml"
            echo "JSON Report: target/tarpaulin/tarpaulin-report.json"
          else
            echo "❌ Coverage report generation failed"
            exit 1
          fi

      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            samoid/target/tarpaulin/tarpaulin-report.html
            samoid/target/tarpaulin/cobertura.xml
            samoid/target/tarpaulin/tarpaulin-report.json
          retention-days: 30

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: samoid/target/tarpaulin/cobertura.xml
          directory: samoid/target/tarpaulin/
          flags: unittests
          name: samoid-coverage
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 💬 Comment coverage on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './samoid/target/tarpaulin/tarpaulin-report.json';
            
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const coveragePercent = coverage.files ? 
                Object.values(coverage.files).reduce((acc, file) => acc + file.covered, 0) / 
                Object.values(coverage.files).reduce((acc, file) => acc + file.coverable, 0) * 100 : 0;
              
              const comment = `## 📊 Code Coverage Report
              
              **Coverage: ${coveragePercent.toFixed(2)}%**
              
              | Metric | Value |
              |--------|-------|
              | Lines Covered | ${Object.values(coverage.files || {}).reduce((acc, file) => acc + file.covered, 0)} |
              | Total Lines | ${Object.values(coverage.files || {}).reduce((acc, file) => acc + file.coverable, 0)} |
              | Coverage % | ${coveragePercent.toFixed(2)}% |
              
              📁 **Coverage by File:**
              ${Object.entries(coverage.files || {}).map(([file, data]) => 
                `- \`${file}\`: ${((data.covered / data.coverable) * 100).toFixed(1)}% (${data.covered}/${data.coverable} lines)`
              ).join('\n')}
              
              ---
              *Coverage report generated by [cargo-tarpaulin](https://github.com/xd009642/tarpaulin)*`;
              
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
                console.log('✅ Coverage comment posted successfully');
              } catch (error) {
                console.log('⚠️ Could not post coverage comment:', error.message);
                console.log('This is expected for forks and doesn\'t affect the coverage generation');
              }
            } else {
              console.log('ℹ️ No coverage report found, skipping comment');
            }

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('samoid/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: 🔧 Install cargo-audit
        run: cargo install --force cargo-audit

      - name: 🔍 Run security audit
        run: |
          cd samoid
          echo "🔒 Running security audit..."
          cargo audit --format json > audit-report.json || echo "Security issues found"
          cargo audit || AUDIT_EXIT_CODE=$?
          
          # Parse audit results
          if [ -f audit-report.json ]; then
            VULNERABILITIES=$(jq '.vulnerabilities.found | length' audit-report.json 2>/dev/null || echo "0")
            WARNINGS=$(jq '.warnings | length' audit-report.json 2>/dev/null || echo "0")
          else
            VULNERABILITIES=0
            WARNINGS=0
          fi
          
          echo "VULNERABILITIES_COUNT=$VULNERABILITIES" >> $GITHUB_ENV
          echo "WARNINGS_COUNT=$WARNINGS" >> $GITHUB_ENV
          echo "🔒 Security Audit Complete: $VULNERABILITIES vulnerabilities, $WARNINGS warnings"
          
          # Exit with original code if there were issues
          if [ ! -z "$AUDIT_EXIT_CODE" ]; then
            exit $AUDIT_EXIT_CODE
          fi

      - name: 💬 Comment security audit on PR
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './samoid/audit-report.json';
            
            let comment = `## 🔒 Security Audit Report\n\n`;
            
            if (fs.existsSync(path)) {
              try {
                const audit = JSON.parse(fs.readFileSync(path, 'utf8'));
                const vulnCount = audit.vulnerabilities?.found?.length || 0;
                const warnCount = audit.warnings?.length || 0;
                
                if (vulnCount === 0 && warnCount === 0) {
                  comment += `✅ **No security issues found!**\n\n`;
                  comment += `🎉 All dependencies passed security audit.\n`;
                } else {
                  comment += `⚠️ **Security Issues Found**\n\n`;
                  comment += `| Type | Count |\n`;
                  comment += `|------|-------|\n`;
                  comment += `| 🚨 Vulnerabilities | ${vulnCount} |\n`;
                  comment += `| ⚠️  Warnings | ${warnCount} |\n\n`;
                  
                  if (vulnCount > 0) {
                    comment += `### 🚨 Vulnerabilities:\n`;
                    audit.vulnerabilities.found.forEach(vuln => {
                      comment += `- **${vuln.package.name}** v${vuln.package.version}\n`;
                      comment += `  - ${vuln.advisory.title}\n`;
                      comment += `  - Severity: ${vuln.advisory.severity}\n`;
                      comment += `  - ID: ${vuln.advisory.id}\n\n`;
                    });
                  }
                  
                  if (warnCount > 0) {
                    comment += `### ⚠️ Warnings:\n`;
                    audit.warnings.forEach(warn => {
                      comment += `- ${warn.kind}: ${warn.package?.name || 'Unknown'}\n`;
                    });
                  }
                }
              } catch (e) {
                comment += `❌ **Error parsing audit report**\n\n`;
                comment += `Could not parse security audit results. Check the logs for details.\n`;
              }
            } else {
              comment += `✅ **Security audit completed successfully**\n\n`;
              comment += `No security report file found - likely no issues detected.\n`;
            }
            
            comment += `\n---\n*Security audit performed by [cargo-audit](https://github.com/RustSec/rustsec)*`;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('✅ Security audit comment posted successfully');
            } catch (error) {
              console.log('⚠️ Could not post security audit comment:', error.message);
              console.log('This is expected for forks and doesn\'t affect the security audit');
            }

  summary:
    name: ✅ Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    if: always()

    steps:
      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Samoid Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Results Section
          echo "## 🔍 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "| 🧪 **Unit & Integration Tests** | ✅ **PASSED** | All test suites executed successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 **Unit & Integration Tests** | ❌ **FAILED** | Some tests failed - check logs for details |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.coverage.result }}" == "success" ]; then
            echo "| 📊 **Code Coverage** | ✅ **GENERATED** | Coverage report generated and uploaded |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📊 **Code Coverage** | ❌ **FAILED** | Coverage generation failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "| 🔒 **Security Audit** | ✅ **CLEAN** | No security vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 **Security Audit** | ⚠️ **ISSUES** | Security audit found potential issues |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Platform Coverage
          echo "## 🌍 Platform Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Ubuntu Latest** (stable, beta, nightly, 1.85.0, 1.88.0)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **macOS Latest** (stable, beta)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Windows Latest** (stable, beta, PowerShell, Git Bash)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Cross-platform compatibility tests** (shell execution, environment detection)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality Metrics
          echo "## 📈 Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "- ✅ **Code Formatting**: All code properly formatted (rustfmt)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Linting**: No Clippy warnings or errors" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Build**: Both debug and release builds successful" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Documentation**: Generated successfully" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Benchmarks**: Performance benchmarks completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Artifacts and Reports
          echo "## 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.coverage.result }}" == "success" ]; then
            echo "- 📊 **Coverage Reports**: HTML, XML, and JSON formats available" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 **Codecov Integration**: Results uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "- 🔒 **Security Audit**: Dependency vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Workflow Information
          echo "## ℹ️ Workflow Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Next Steps
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.coverage.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
            echo "🎉 **All checks passed!** This code is ready for review and merge." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All tests are passing" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code coverage is being tracked" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ No security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code quality metrics are satisfied" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed.** Please review the failing jobs:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test.result }}" != "success" ]; then
              echo "- ❌ Fix failing tests before proceeding" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.coverage.result }}" != "success" ]; then
              echo "- ❌ Resolve code coverage generation issues" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ needs.security.result }}" != "success" ]; then
              echo "- ⚠️ Address security audit findings" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: 🎯 Check overall success
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.coverage.result }}" != "success" ]; then
            echo "❌ Workflow failed - check individual job results"
            exit 1
          else
            echo "✅ All checks passed successfully!"
          fi
