# ============================================================================
# Release PR Workflow - Creates and manages release pull requests
# ============================================================================
# This workflow uses release-plz to automatically create release PRs based on
# conventional commits. The actual release happens in a separate workflow
# triggered by tag pushes after PR merge.

name: Release PR

on:
  push:
    branches: [master]

# Minimal permissions - only what's needed for PR creation
permissions:
  contents: read
  pull-requests: write

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@2fcdc490d667999e01ddbbf0f2823181beef6b39 # v1.15.0
        with:
          toolchain: 1.90.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@bc2d2e71bd35c5549942babaa51a89c586b981d1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: release-plz

      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@acb9246af4d59a270d1d4058a8b9af8c3f3a2559 # v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: release-pr
