# ============================================================================
# Release-plz Tag Workflow
# ============================================================================
# Automated release tagging with release-plz
# - Detects Cargo.toml version bumps on master
# - Creates annotated tags to trigger the release pipeline
# - Uses rust-cache for faster tool setup
# - Requires write access for tag pushes

name: Release-plz Tag

on:
  push:
    branches: [master]
    paths:
      - 'src/**'
      - 'assets/**'
      - 'tests/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/release-plz.yml'
      - 'clippy.toml'
      - 'install.sh'
      - 'uninstall.sh'

permissions:
  contents: write

env:
  RUST_VERSION: "1.90.0"
  CARGO_TERM_COLOR: always

jobs:
  release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    # Prevent infinite loops from github-actions bot or [skip ci]
    if: |
      github.event.pusher.name != 'github-actions[bot]' &&
      !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Detect version bumps in Cargo.toml to trigger release tagging
      # Compares previous and current version strings
      - name: Check for version change
        id: check
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "^Cargo.toml$"; then
            PREV_VERSION=$(git show HEAD~1:Cargo.toml | grep '^version' | head -1 | cut -d'"' -f2)
            CURR_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)

            if [[ "$PREV_VERSION" != "$CURR_VERSION" ]]; then
              echo "Version changed from $PREV_VERSION to $CURR_VERSION"
              echo "should_release=true" >> "$GITHUB_OUTPUT"
              echo "version=$CURR_VERSION" >> "$GITHUB_OUTPUT"
            else
              echo "No version change detected"
              echo "should_release=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "Cargo.toml not modified"
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          fi

      # Install Rust toolchain required by release-plz for Cargo operations
      - name: Install Rust toolchain
        if: steps.check.outputs.should_release == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
        with:
          toolchain: 1.90.0

      - name: Setup Rust cache
        if: steps.check.outputs.should_release == 'true'
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          cache-on-failure: true
          prefix-key: "v2-rust"
          key: release-plz

      # Creates Git tag and triggers the release workflow
      - name: Run release-plz release
        if: steps.check.outputs.should_release == 'true'
        uses: MarcoIeni/release-plz-action@acb9246af4d59a270d1d4058a8b9af8c3f3a2559 # v0.5.117
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: release
