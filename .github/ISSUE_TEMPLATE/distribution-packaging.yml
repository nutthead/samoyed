name: 📦 Distribution & Packaging
description: Package manager integration, distribution channels, and installation methods
title: "[Distribution]: "
labels: ["🚀 deployment", "🏁 phase: transition", "🎯 type: nonfunctional"]
projects: []
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        Thanks for improving Samoid's distribution! Package manager integration helps users install and update Samoid easily.

  - type: textarea
    id: summary
    attributes:
      label: Summary
      description: Provide a clear summary of the distribution enhancement
      placeholder: Brief description of the distribution channel or packaging improvement...
    validations:
      required: true

  - type: dropdown
    id: distribution-type
    attributes:
      label: Distribution Channel
      description: What type of distribution channel is this?
      options:
        - 🍺 Homebrew - macOS/Linux package manager (brew install)
        - 🪣 Scoop - Windows package manager (scoop install)
        - 🍫 Chocolatey - Windows package manager (choco install)
        - 📦 APT Repository - Debian/Ubuntu package repository
        - 📦 YUM/DNF Repository - Red Hat/Fedora package repository
        - 🐧 Snap Package - Universal Linux package (snap install)
        - 📥 Installation Script - Automated download/install script (curl | sh)
        - 🔐 Package Signing - Cryptographic signing of release artifacts
        - 🌐 Other Distribution - Different distribution method
      default: 0
    validations:
      required: true

  - type: textarea
    id: target-users
    attributes:
      label: Target Users
      description: Who will benefit from this distribution method?
      placeholder: |
        Target audience:
        - macOS developers using Homebrew
        - Windows users preferring GUI installers
        - Linux system administrators...
    validations:
      required: true

  - type: textarea
    id: current-state
    attributes:
      label: Current State
      description: Describe current installation methods and their limitations
      placeholder: |
        Current installation options:
        - Manual binary download from GitHub releases
        - cargo install samoid (Rust developers only)
        - Limitations: [specific pain points]
    validations:
      required: true

  - type: textarea
    id: proposed-implementation
    attributes:
      label: Proposed Implementation
      description: Describe the specific implementation approach
      placeholder: |
        Implementation plan:
        - Create package manifest/formula
        - Set up automated publishing workflow
        - Test installation across target platforms
        - Update documentation...
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: List specific, testable requirements for completion
      placeholder: |
        - [ ] Package manifest/formula created and validated
        - [ ] Automated publishing workflow implemented
        - [ ] Installation tested on target platforms
        - [ ] Documentation updated with installation instructions
        - [ ] Package properly handles updates/uninstallation
    validations:
      required: true

  - type: checkboxes
    id: platform-support
    attributes:
      label: Target Platforms
      description: Which platforms will be supported?
      options:
        - label: macOS (Intel x64)
        - label: macOS (Apple Silicon ARM64)
        - label: Linux (x86_64)
        - label: Linux (ARM64)
        - label: Windows (x64)
        - label: Windows (x86/32-bit)

  - type: textarea
    id: package-manifest
    attributes:
      label: Package Manifest/Formula Details
      description: Provide details about the package configuration
      placeholder: |
        Package configuration:
        - Package name: samoid
        - Version management: [semver, git tags]
        - Dependencies: [none, system requirements]
        - Installation location: [/usr/local/bin, ~/.local/bin]
        - Configuration files: [locations, permissions]

  - type: textarea
    id: automation-workflow
    attributes:
      label: Automation & Publishing
      description: How will package updates be automated?
      placeholder: |
        Automation approach:
        - Trigger: [on release, manual workflow]
        - Update mechanism: [PR to tap, API submission]
        - Validation: [testing, checksums, signatures]
        - Rollback plan: [if issues discovered]

  - type: textarea
    id: testing-strategy
    attributes:
      label: Testing Strategy
      description: How will you validate the distribution channel?
      placeholder: |
        Testing plan:
        - Fresh installation on clean systems
        - Update scenarios (old version → new version)
        - Uninstallation cleanup verification
        - Cross-platform compatibility testing
        - Integration with existing tools/workflows

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How important is this distribution channel?
      options:
        - 🔥 High - Critical for user adoption
        - ⚡ Medium - Important for convenience
        - 🟢 Low - Nice to have additional option
      default: 1
    validations:
      required: true

  - type: dropdown
    id: effort
    attributes:
      label: Estimated Effort (Story Points)
      description: Rough estimate of implementation complexity
      options:
        - 🟢 1-2 - Simple manifest creation
        - 🟡 3-5 - Medium complexity with automation
        - 🟠 6-7 - Complex setup with testing infrastructure
        - 🔴 8-10 - Major infrastructure requiring hosting/signing
      default: 1
    validations:
      required: true

  - type: textarea
    id: security-considerations
    attributes:
      label: Security Considerations
      description: What security measures are needed?
      placeholder: |
        Security requirements:
        - Package signing/verification
        - Checksum validation
        - Secure distribution channels
        - Update integrity verification
        - Vulnerability disclosure process

  - type: textarea
    id: maintenance-requirements
    attributes:
      label: Long-term Maintenance
      description: What ongoing maintenance will be required?
      placeholder: |
        Maintenance considerations:
        - Regular testing of installation process
        - Monitoring package manager ecosystem changes
        - Updating manifests for new releases
        - Handling deprecated distribution channels
        - Community support and issue resolution

  - type: textarea
    id: dependencies
    attributes:
      label: Dependencies & Prerequisites
      description: List any dependencies or setup requirements
      placeholder: |
        Prerequisites:
        - **Depends on**: #issue_number (Description)
        - **Requires**: External accounts/access (Homebrew tap, Windows signing cert)
        - **Blocks**: #issue_number (Description)

  - type: textarea
    id: success-metrics
    attributes:
      label: Success Metrics
      description: How will you measure the success of this distribution channel?
      placeholder: |
        Success criteria:
        - Installation success rate: >95%
        - User feedback: Positive reception
        - Adoption metrics: Downloads/installs via this channel
        - Reduced manual installation support requests

  - type: textarea
    id: additional-context
    attributes:
      label: Additional Context
      description: Add any other context, examples, or references
      placeholder: Any additional information...